@model SAP.Addon.Domain.Models.Business.ZOOATViewModel
@{
    ViewBag.Title = "Create Blanket Agreement";
}
<style>
    .table tfoot tr td,.table tfoot tr th,.table thead tr th{border-bottom:1px solid #c4c4c4;font-size: 11px;}
</style>
<script>

    function onCodeData() {
        return {
            pbCode: $("#BpCode").val()
        };
    }
        function onNameData() {
            return {
                pbName: $("#BpName").val()
            };
        }

        function onSelected(e) {
            var dataItem = this.dataItem(e.item.index());
           // $(this).val(dataItem.CN);
            $("#BpCode").val(dataItem.CC);
            $("#BpName").val(dataItem.CN);

            $("#PhoneNo").val(dataItem.TEL);
            $("#Balance").val(dataItem.Balance);
            $("#CG").val(dataItem.CG);
            $("#CreditLine").val(dataItem.CreditLine);

            ReloadContactPersons();
            LoadBusinessPartner(dataItem.CC);
        }

        function onFiltering() {
            
            $("#PhoneNo").val('');
            $("#Balance").val('');
            $("#CG").val('');
            $("#CreditLine").val('');

            var dropDownList = $('#ContactPerson').data('kendoComboBox');
            dropDownList.text('');

        }

        function LoadBusinessPartner(cardCode) {
            $.ajax({
                url: "@Url.Action("LoadBusinessPartner","BlanketAgreement")"+"?cardCode="+cardCode,
                type: "Get",
                success: function (data, status) {
                    console.log(data);
                    $("#PaymentTerms").val(data.PYMNTGROUP);
                    $("#Email").val(data.E_MAIL);
                    $("#PhoneNo").val(data.PHONE1);
                },
                error: function (data) {
                    alert('failed');
                }
            })
        }

        function ReloadContactPersons()
        {
            var dropDownList = $('#ContactPerson').data('kendoComboBox');
            dropDownList.text('');
            dropDownList.dataSource.read();
            dropDownList.refresh();
        }
</script>

@using (Html.BeginForm())
{
    <div class="form-horizontal">
        @Html.ValidationSummary()

        <div class="form-group">
            <div class="col-md-4">
                <div class="row">
                    <div class="col-sm-4">
                        <label class="control-label">PB Code</label>
                    </div>
                    <div class="col-sm-4 ">
                        @Html.EditorFor(m => m.BpCode, new { Data = "onCodeData", onSelected = "onSelected", onFiltering = "onFiltering", DataTextField = "CC" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <label class="control-label">PB Name</label>
                    </div>

                    <div class="col-sm-8 ">

                        @Html.EditorFor(m => m.BpName, new { Data = "onNameData", onSelected = "onSelected", onFiltering = "onFiltering", DataTextField = "CN" })
                    </div>
                    <div class="col-sm-4">
                        <label class="control-label">Contract No.</label>
                    </div>
                    <div class="col-sm-8">
                        @Html.EditorFor(m => m.U_AgreementNo, new { @class = "form-control  input-sm" })
                    </div>

                    <div class="col-sm-4">
                        <label class="control-label">ContactPerson</label>
                    </div>
                    <div class="col-sm-8 ">
                        @(Html.Kendo().ComboBox()
        .Name("ContactPerson")
        .HtmlAttributes(new { style = "width:100%;", @class = "" })
        .Placeholder("Select...")
        .DataTextField("Name")
        .DataValueField("Code")
        .Filter(FilterType.Contains)
        .DataSource(source =>
        {
            source.Read(read =>
            {
                read.Action("LoadContactPersons", "BlanketAgreement")
                    .Data("filterContact");
            })
            .ServerFiltering(true);
        })
        .AutoBind(false)
        .CascadeFromField("BpCode")
                        )
                        <script>
                        function filterContact() {
                            return {

                                cardCode: $("#BpCode").val()
                            };
                         }
                        </script>
                    </div>

                    <div class="col-sm-4">
                        <label class="control-label">Phone No</label>
                    </div>
                    <div class="col-sm-8 ">
                        @Html.TextBox("PhoneNo", "", new { @class = "form-control input-sm", @readonly = "readonly" })
                    </div>
                    <div class="col-sm-4">
                        <label class="control-label">Email</label>
                    </div>
                    <div class="col-sm-8 ">
                        @Html.TextBox("Email", "", new { @class = "form-control input-sm", @readonly = "readonly" })
                    </div>

                    <div class="col-sm-4">
                        <label class="control-label">Description</label>
                    </div>
                    <div class="col-sm-8 ">
                        @Html.TextBoxFor(m => m.Descript, new { @class = "form-control input-sm" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">

                <div class="row">
                    <div class="col-sm-5">
                        <label class="control-label">BP Payment Terms</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.TextBox("PaymentTerms", "", new { @class = "form-control input-sm", @readonly = "readonly" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">PB Balance (LC)</label>
                    </div>
                    <div class="col-sm-7 ">

                        @Html.TextBox("Balance", "", new { @class = "form-control input-sm ", @readonly = "readonly" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">PB Credit Limit (LC)</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.TextBox("CreditLine", "", new { @class = "form-control input-sm", @readonly = "readonly" })

                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">Total Amount (LC)</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().NumericTextBoxFor(m => m.U_Commission).HtmlAttributes(new { @class = "bg-lightyellow", style = "width:100%", @readonly = "readonly" })
                    </div>
                    <div class="col-sm-5">
                        <label class="control-label">Total Quantity</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().NumericTextBoxFor(m => m.AmendedTo).HtmlAttributes(new { @class = "bg-lightyellow", style = "width:100%", @readonly = "readonly" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">TotalWinAmount(LC)</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().NumericTextBoxFor(m => m.LogInstanc).HtmlAttributes(new { @class = "bg-lightyellow", style = "width:100%", @readonly = "readonly" })
                    </div>
                    <div class="col-sm-5">
                        <label class="control-label">Total Win Quantity</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().NumericTextBoxFor(m => m.RemindVal).HtmlAttributes(new { @class = "bg-lightyellow", style = "width:100%", @readonly = "readonly" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="row">
                    <div class="col-sm-5">

                    </div>
                    <div class="col-sm-7 ">
                        <div class="checkbox-custom">
                            <input type="checkbox" name="LogInstanc" id="LogInstanc">
                            <label for="checkbox2">Active</label>
                        </div>
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">Agreement No.</label>
                    </div>
                    <div class="col-sm-3 ">
                        @Html.TextBoxFor(m => m.U_Commission, new { @class = "form-control input-sm", @readonly = "readonly" })
                    </div>
                    <div class="col-sm-4 ">
                        @Html.TextBoxFor(m => m.U_AgreementNo, new { @class = "form-control input-sm bg-lightyellow", @readonly = "readonly" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">Agreement Method</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.DropDownListFor(m => m.Method, (SelectList)ViewBag.AgreementMethod, new { @class = "form-control input-sm" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">Start Date</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().DatePickerFor(m => m.StartDate).Format("dd/MM/yyyy").HtmlAttributes(new { @style = "width:100%" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">End Date</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().DatePickerFor(m => m.EndDate).Format("dd/MM/yyyy").HtmlAttributes(new { @style = "width:100%" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">Termination Date</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().DatePickerFor(m => m.TermDate).Format("dd/MM/yyyy").HtmlAttributes(new { @style = "width:100%" })
                    </div>

                    <div class="col-sm-5">
                        <label class="control-label">Signing Date</label>
                    </div>
                    <div class="col-sm-7 ">
                        @Html.Kendo().DatePickerFor(m => m.SignDate).Format("dd/MM/yyyy").HtmlAttributes(new { @style = "width:100%" })
                    </div>
                </div>
            </div>
        </div>
        <div class="tabs mb20">
            <ul id="myTab" class="nav nav-tabs">
                <li class="active">
                    <a href="#general" data-toggle="tab" aria-expanded="true">General</a>
                </li>
                <li class="">
                    <a href="#details" data-toggle="tab">Details</a>
                </li>
                <li class="">
                    <a href="#attachments" data-toggle="tab">Attachments</a>
                </li>
            </ul>
            <div id="myTabContent2" class="tab-content">
                <div class="tab-pane fade active in" id="general">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="col-sm-3">
                                <label class="control-label">Owner</label>
                            </div>
                            <div class="col-sm-7 ">
                                @Html.DropDownListFor(m => m.Owner, (SelectList)ViewBag.Owners, "", new { @class = "form-control input-sm" })
                            </div>
                            <div class="col-sm-3">
                                <label class="control-label">AgreementType</label>
                            </div>
                            <div class="col-sm-7 ">
                                @Html.DropDownListFor(m => m.Type, (SelectList)ViewBag.AgreementTypes, new { @class = "form-control input-sm" })
                            </div>
                            <div class="col-sm-3">
                                <label class="control-label">&nbsp;</label>
                            </div>
                            <div class="col-sm-9 ">
                                <div class="checkbox-custom">
                                    <input type="checkbox" name="Ignored" checked id="Ignored" disabled>
                                    <label for="checkbox2">Ignore Prices Specifiled in Blanket Agreement</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="col-sm-5">
                                <label class="control-label">Status</label>
                            </div>
                            <div class="col-sm-7 ">
                                @Html.DropDownListFor(m => m.Status, (SelectList)ViewBag.Status, new { @class = "form-control input-sm" })
                            </div>
                            <div class="col-sm-5">
                                <label class="control-label">Document Type</label>
                            </div>
                            <div class="col-sm-7 ">
                                @Html.DropDownListFor(m => m.Type, (SelectList)ViewBag.DocumentTypes, new { @class = "form-control input-sm" })
                            </div>
                            <div class="col-sm-5">
                                <label class="control-label">Payment Terms</label>
                            </div>
                            <div class="col-sm-7 ">
                                @Html.DropDownListFor(m => m.Transfered, (SelectList)ViewBag.PaymentTerms, "", new { @class = "form-control input-sm" })
                            </div>
                        </div>
                        <div class="clearfix"></div>
                        <div class="col-sm-2">
                            <label class="control-label">Remarks</label>
                        </div>
                        <div class="col-sm-12 ">
                            @Html.TextAreaFor(m => m.Remarks, new { @class = "form-control input-sm bg-lightyellow", rows = "10" })
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="details">
                    <div class="">
                        @Html.Partial("~/Areas/Business/Views/BlanketAgreementDetail/DetailList.cshtml", Model.Details, new ViewDataDictionary {
                        { "Origins" , ViewBag.Origins },
                       { "LineStatus" , ViewBag.LineStatus },
                       { "TenderTypes" , ViewBag.TenderTypes },
                       { "NotifyQty" , ViewBag.NotifyQty },
                       { "UoMs", ViewBag.UoMs }
                   })
                    </div>
                </div>
                <div class="tab-pane fade" id="attachments">
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia, suscipit, autem sit natus deserunt officia error odit ea minima soluta ratione maxime molestias fugit explicabo aspernatur praesentium quisquam voluptatum fuga delectus quidem quas aliquam
                        minus at corporis libero? Modi, aperiam, pariatur, sequi illum dolore consequuntur aspernatur eos hic officia doloribus magnam impedit autem maiores alias consectetur tempore explicabo. Ducimus, minima, suscipit
                        unde harum numquam ipsa laboriosam cupiditate nemo repellendus at? Dolorum dicta nemo quaerat iusto.
                    </p>
                </div>
            </div>
        </div>
        <div class="clearfix"></div>

        <div class="row">
            <div class="col-md-6">
                <button type="submit" class="btn btn-primary"><i class="fa fa-save"></i> Save</button>
                <a href="@Url.Action("Index")" class="btn btn-danger"><i class="fa fa-remove"></i> Cancel</a>

            </div>
            <div class="col-md-6">
                <a href="#" class="btn btn-primary  pull-right"><i class="fa fa-file-excel-o"></i> Export to Excel</a>
                <a href="#" class="btn btn-warning  pull-right"><i class="fa fa-external-link"></i> Post</a>

            </div>
        </div>
    </div>
}




